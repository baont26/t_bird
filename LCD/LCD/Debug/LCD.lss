
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dcd  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a27  00000000  00000000  00001291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b9  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049e  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000306  00000000  00000000  0000283a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ed d0       	rcall	.+474    	; 0x29e <main>
  c4:	36 c1       	rjmp	.+620    	; 0x332 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_clk>:

void lcd_clk(void)
{
	//LCD E 0
	//(1<<3)=0b00001000 ~(1<<3)=0b11110111
	LCD_E_PORT &= ~(1<<LCD_E_PIN);		//ne irjak felul semmit
  c8:	e2 e6       	ldi	r30, 0x62	; 98
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 7f       	andi	r24, 0xF7	; 247
  d0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	9f e1       	ldi	r25, 0x1F	; 31
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_clk+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_clk+0x14>
  dc:	00 00       	nop
	_delay_ms(2);
	//LCD E 1
	LCD_E_PORT |= (1<<LCD_E_PIN);
  de:	80 81       	ld	r24, Z
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	80 83       	st	Z, r24
  e4:	8f e3       	ldi	r24, 0x3F	; 63
  e6:	9f e1       	ldi	r25, 0x1F	; 31
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_clk+0x20>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_clk+0x26>
  ee:	00 00       	nop
	_delay_ms(2);
	//LCD E 0
	LCD_E_PORT &= ~(1<<LCD_E_PIN);
  f0:	80 81       	ld	r24, Z
  f2:	87 7f       	andi	r24, 0xF7	; 247
  f4:	80 83       	st	Z, r24
  f6:	8f e3       	ldi	r24, 0x3F	; 63
  f8:	9f e1       	ldi	r25, 0x1F	; 31
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_clk+0x32>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_clk+0x38>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <lcd_send_cmd>:
	_delay_ms(2);
}
void lcd_send_cmd(uint8_t cmd)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	c8 2f       	mov	r28, r24
	//R/W: 0(iras)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
 10a:	e2 e6       	ldi	r30, 0x62	; 98
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8b 7f       	andi	r24, 0xFB	; 251
 112:	80 83       	st	Z, r24
	//RS: 0(IR)
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
 114:	80 81       	ld	r24, Z
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	80 83       	st	Z, r24
	//Felso 4-bit
	uint8_t data_temp;
	data_temp=PINE;
 11a:	d1 b1       	in	r29, 0x01	; 1
	LCD_DATA_PORT = (cmd&0xF0);
 11c:	8c 2f       	mov	r24, r28
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	83 b9       	out	0x03, r24	; 3
	//E CLK
	lcd_clk();
 122:	d2 df       	rcall	.-92     	; 0xc8 <lcd_clk>
	//Also 4-bit
	LCD_DATA_PORT = (cmd&0x0F)<<LCD_DATA_SHIFT;
 124:	20 e1       	ldi	r18, 0x10	; 16
 126:	c2 9f       	mul	r28, r18
 128:	c0 01       	movw	r24, r0
 12a:	11 24       	eor	r1, r1
	//E CLK
	lcd_clk();
 12c:	83 b9       	out	0x03, r24	; 3
 12e:	cc df       	rcall	.-104    	; 0xc8 <lcd_clk>
	LCD_DATA_PORT=data_temp;
 130:	d3 b9       	out	0x03, r29	; 3
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <lcd_init>:

void lcd_init(void)
{
	LCD_DATA_DDR|=0xF0;
 138:	82 b1       	in	r24, 0x02	; 2
 13a:	80 6f       	ori	r24, 0xF0	; 240
 13c:	82 b9       	out	0x02, r24	; 2
	LCD_E_DDR|=(1<<LCD_E_PIN);
 13e:	e1 e6       	ldi	r30, 0x61	; 97
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 60       	ori	r24, 0x08	; 8
 146:	80 83       	st	Z, r24
	LCD_RS_DDR|=(1<<LCD_RS_PIN);
 148:	80 81       	ld	r24, Z
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 83       	st	Z, r24
	LCD_RW_DDR|=(1<<LCD_RW_PIN);
 14e:	80 81       	ld	r24, Z
 150:	84 60       	ori	r24, 0x04	; 4
 152:	80 83       	st	Z, r24
	//4 adat vezetekre 2-est kikuldeni
	LCD_DATA_PORT |= 0x20;
 154:	83 b1       	in	r24, 0x03	; 3
 156:	80 62       	ori	r24, 0x20	; 32
 158:	83 b9       	out	0x03, r24	; 3
	//3x clk
	lcd_clk();
 15a:	b6 df       	rcall	.-148    	; 0xc8 <lcd_clk>
	lcd_clk();
 15c:	b5 df       	rcall	.-150    	; 0xc8 <lcd_clk>
	lcd_clk();
 15e:	b4 df       	rcall	.-152    	; 0xc8 <lcd_clk>
	//3x 0x28 cmd
	lcd_send_cmd(0x28);
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	d0 df       	rcall	.-96     	; 0x104 <lcd_send_cmd>
	lcd_send_cmd(0x28);
 164:	88 e2       	ldi	r24, 0x28	; 40
 166:	ce df       	rcall	.-100    	; 0x104 <lcd_send_cmd>
	lcd_send_cmd(0x28);
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	cc df       	rcall	.-104    	; 0x104 <lcd_send_cmd>
	//Display ON - Kurzor cuccok
	lcd_send_cmd(0x0C);		//LCD ON, CUR ON, BL ON //sima LCD ON 0x0C
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	ca df       	rcall	.-108    	; 0x104 <lcd_send_cmd>
 170:	81 e0       	ldi	r24, 0x01	; 1
	//LCD CRL
	lcd_send_cmd(LCD_CL_DISPLAY);
 172:	c8 cf       	rjmp	.-112    	; 0x104 <lcd_send_cmd>
 174:	08 95       	ret

00000176 <lcd_data>:
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	
}

//Data iras
void lcd_data(uint8_t data)
{
 17a:	c8 2f       	mov	r28, r24
	//R/W: 0(iras)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
 17c:	e2 e6       	ldi	r30, 0x62	; 98
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8b 7f       	andi	r24, 0xFB	; 251
 184:	80 83       	st	Z, r24
	//RS: 1(adat)
	LCD_RS_PORT |= (1<<LCD_RS_PIN);
 186:	80 81       	ld	r24, Z
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	80 83       	st	Z, r24
	//Felso 4-bit
	uint8_t data_temp;
	data_temp=PINE;
 18c:	d1 b1       	in	r29, 0x01	; 1
	LCD_DATA_PORT = (data&0xF0);
 18e:	8c 2f       	mov	r24, r28
 190:	80 7f       	andi	r24, 0xF0	; 240
 192:	83 b9       	out	0x03, r24	; 3
	//E CLK
	lcd_clk();
 194:	99 df       	rcall	.-206    	; 0xc8 <lcd_clk>
	//Also 4-bit
	LCD_DATA_PORT = (data&0x0F)<<LCD_DATA_SHIFT;
 196:	20 e1       	ldi	r18, 0x10	; 16
 198:	c2 9f       	mul	r28, r18
 19a:	c0 01       	movw	r24, r0
 19c:	11 24       	eor	r1, r1
	//E CLK
	lcd_clk();
 19e:	83 b9       	out	0x03, r24	; 3
 1a0:	93 df       	rcall	.-218    	; 0xc8 <lcd_clk>
	LCD_DATA_PORT=data_temp;
 1a2:	d3 b9       	out	0x03, r29	; 3
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <lcd_write_string>:

//LCD CLK - LCD_E 0-1-0 _||_

void lcd_write_string(char *s)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
	while (*s)
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <lcd_write_string+0xc>
	{
		lcd_data(*s);
 1b2:	e1 df       	rcall	.-62     	; 0x176 <lcd_data>
		s++;
 1b4:	21 96       	adiw	r28, 0x01	; 1

//LCD CLK - LCD_E 0-1-0 _||_

void lcd_write_string(char *s)
{
	while (*s)
 1b6:	88 81       	ld	r24, Y
 1b8:	81 11       	cpse	r24, r1
 1ba:	fb cf       	rjmp	.-10     	; 0x1b2 <lcd_write_string+0x8>
	{
		lcd_data(*s);
		s++;
	}
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_cur_posi>:
void lcd_cur_posi(uint8_t row, uint8_t colum)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <lcd_cur_posi+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <lcd_cur_posi+0x8>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	colum>LCD_COL_LAST?colum=LCD_COL_LAST:0;
 1ce:	60 31       	cpi	r22, 0x10	; 16
 1d0:	08 f0       	brcs	.+2      	; 0x1d4 <lcd_cur_posi+0x12>
 1d2:	6f e0       	ldi	r22, 0x0F	; 15
	uint8_t position[4]={LCD_LINE_0,LCD_LINE_1,LCD_LINE_2,LCD_LINE_3};
 1d4:	90 e8       	ldi	r25, 0x80	; 128
 1d6:	99 83       	std	Y+1, r25	; 0x01
 1d8:	90 ec       	ldi	r25, 0xC0	; 192
 1da:	9a 83       	std	Y+2, r25	; 0x02
 1dc:	90 e9       	ldi	r25, 0x90	; 144
 1de:	9b 83       	std	Y+3, r25	; 0x03
 1e0:	90 ed       	ldi	r25, 0xD0	; 208
 1e2:	9c 83       	std	Y+4, r25	; 0x04
	lcd_send_cmd((position[row])+colum);
 1e4:	e1 e0       	ldi	r30, 0x01	; 1
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ec 0f       	add	r30, r28
 1ea:	fd 1f       	adc	r31, r29
 1ec:	e8 0f       	add	r30, r24
 1ee:	f1 1d       	adc	r31, r1
 1f0:	80 81       	ld	r24, Z
 1f2:	86 0f       	add	r24, r22
 1f4:	87 df       	rcall	.-242    	; 0x104 <lcd_send_cmd>
}
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <lcd_time_vlt>:
		
	}
}
void lcd_time_vlt()
{
	if(ora[1]==59)
 204:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__data_end+0x1>
 208:	8b 33       	cpi	r24, 0x3B	; 59
 20a:	59 f4       	brne	.+22     	; 0x222 <lcd_time_vlt+0x1e>
		{
			ora[1]=0;
 20c:	e4 e0       	ldi	r30, 0x04	; 4
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	11 82       	std	Z+1, r1	; 0x01
			ora[0]++;
 212:	80 81       	ld	r24, Z
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 83       	st	Z, r24
			if(ora[0]==59)
 218:	8b 33       	cpi	r24, 0x3B	; 59
 21a:	31 f4       	brne	.+12     	; 0x228 <lcd_time_vlt+0x24>
			ora[0]=0;
 21c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 220:	08 95       	ret
			
		}
	else ora[1]++;
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x1>
 228:	08 95       	ret

0000022a <lcd_dis_time>:
}
void lcd_dis_time()
{	
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	00 d0       	rcall	.+0      	; 0x234 <lcd_dis_time+0xa>
 234:	1f 92       	push	r1
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	lcd_cur_posi(LCD_ROW_0,4);
 23a:	64 e0       	ldi	r22, 0x04	; 4
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	c1 df       	rcall	.-126    	; 0x1c2 <lcd_cur_posi>
	char buf[3];
	if(ora[0]<10)
 240:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 244:	8a 30       	cpi	r24, 0x0A	; 10
 246:	18 f4       	brcc	.+6      	; 0x24e <lcd_dis_time+0x24>
		lcd_write_string("0");
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	ae df       	rcall	.-164    	; 0x1aa <lcd_write_string>
	lcd_write_string(itoa(ora[0],buf,10));
 24e:	04 e0       	ldi	r16, 0x04	; 4
 250:	11 e0       	ldi	r17, 0x01	; 1
 252:	f8 01       	movw	r30, r16
 254:	80 81       	ld	r24, Z
 256:	4a e0       	ldi	r20, 0x0A	; 10
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	be 01       	movw	r22, r28
 25c:	6f 5f       	subi	r22, 0xFF	; 255
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2a d0       	rcall	.+84     	; 0x2b8 <itoa>
 264:	a2 df       	rcall	.-188    	; 0x1aa <lcd_write_string>
	lcd_write_string(":");
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	9f df       	rcall	.-194    	; 0x1aa <lcd_write_string>
 26c:	f8 01       	movw	r30, r16
	if(ora[1]<10)
 26e:	81 81       	ldd	r24, Z+1	; 0x01
 270:	8a 30       	cpi	r24, 0x0A	; 10
 272:	18 f4       	brcc	.+6      	; 0x27a <lcd_dis_time+0x50>
		lcd_write_string("0");
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	98 df       	rcall	.-208    	; 0x1aa <lcd_write_string>
 27a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__data_end+0x1>
	lcd_write_string(itoa(ora[1],buf,10));
 27e:	4a e0       	ldi	r20, 0x0A	; 10
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	16 d0       	rcall	.+44     	; 0x2b8 <itoa>
 28c:	8e df       	rcall	.-228    	; 0x1aa <lcd_write_string>
 28e:	0f 90       	pop	r0
	
}
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <main>:
 29e:	4c df       	rcall	.-360    	; 0x138 <lcd_init>
	
	
	
	while (1)
	{
		lcd_time_vlt();
 2a0:	b1 df       	rcall	.-158    	; 0x204 <lcd_time_vlt>
		lcd_dis_time();
 2a2:	c3 df       	rcall	.-122    	; 0x22a <lcd_dis_time>
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	89 e6       	ldi	r24, 0x69	; 105
 2a8:	98 e1       	ldi	r25, 0x18	; 24
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0xc>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x16>
 2b4:	00 00       	nop
 2b6:	f4 cf       	rjmp	.-24     	; 0x2a0 <main+0x2>

000002b8 <itoa>:
 2b8:	45 32       	cpi	r20, 0x25	; 37
 2ba:	51 05       	cpc	r21, r1
 2bc:	18 f4       	brcc	.+6      	; 0x2c4 <itoa+0xc>
 2be:	42 30       	cpi	r20, 0x02	; 2
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <itoa+0xc>
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <__itoa_ncheck>
 2c4:	fb 01       	movw	r30, r22
 2c6:	10 82       	st	Z, r1
 2c8:	cb 01       	movw	r24, r22
 2ca:	08 95       	ret

000002cc <__itoa_ncheck>:
 2cc:	bb 27       	eor	r27, r27
 2ce:	4a 30       	cpi	r20, 0x0A	; 10
 2d0:	31 f4       	brne	.+12     	; 0x2de <__itoa_ncheck+0x12>
 2d2:	99 23       	and	r25, r25
 2d4:	22 f4       	brpl	.+8      	; 0x2de <__itoa_ncheck+0x12>
 2d6:	bd e2       	ldi	r27, 0x2D	; 45
 2d8:	90 95       	com	r25
 2da:	81 95       	neg	r24
 2dc:	9f 4f       	sbci	r25, 0xFF	; 255
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <__utoa_common>

000002e0 <__utoa_ncheck>:
 2e0:	bb 27       	eor	r27, r27

000002e2 <__utoa_common>:
 2e2:	fb 01       	movw	r30, r22
 2e4:	55 27       	eor	r21, r21
 2e6:	aa 27       	eor	r26, r26
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	aa 1f       	adc	r26, r26
 2ee:	a4 17       	cp	r26, r20
 2f0:	10 f0       	brcs	.+4      	; 0x2f6 <__utoa_common+0x14>
 2f2:	a4 1b       	sub	r26, r20
 2f4:	83 95       	inc	r24
 2f6:	50 51       	subi	r21, 0x10	; 16
 2f8:	b9 f7       	brne	.-18     	; 0x2e8 <__utoa_common+0x6>
 2fa:	a0 5d       	subi	r26, 0xD0	; 208
 2fc:	aa 33       	cpi	r26, 0x3A	; 58
 2fe:	08 f0       	brcs	.+2      	; 0x302 <__utoa_common+0x20>
 300:	a9 5d       	subi	r26, 0xD9	; 217
 302:	a1 93       	st	Z+, r26
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	79 f7       	brne	.-34     	; 0x2e6 <__utoa_common+0x4>
 308:	b1 11       	cpse	r27, r1
 30a:	b1 93       	st	Z+, r27
 30c:	11 92       	st	Z+, r1
 30e:	cb 01       	movw	r24, r22
 310:	00 c0       	rjmp	.+0      	; 0x312 <strrev>

00000312 <strrev>:
 312:	dc 01       	movw	r26, r24
 314:	fc 01       	movw	r30, r24
 316:	67 2f       	mov	r22, r23
 318:	71 91       	ld	r23, Z+
 31a:	77 23       	and	r23, r23
 31c:	e1 f7       	brne	.-8      	; 0x316 <strrev+0x4>
 31e:	32 97       	sbiw	r30, 0x02	; 2
 320:	04 c0       	rjmp	.+8      	; 0x32a <strrev+0x18>
 322:	7c 91       	ld	r23, X
 324:	6d 93       	st	X+, r22
 326:	70 83       	st	Z, r23
 328:	62 91       	ld	r22, -Z
 32a:	ae 17       	cp	r26, r30
 32c:	bf 07       	cpc	r27, r31
 32e:	c8 f3       	brcs	.-14     	; 0x322 <strrev+0x10>
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
